!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.modbox=t():e.modbox=t()}(self,(function(){return(()=>{"use strict";var __webpack_modules__={462:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>LoaderMod});var _modapi__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(791);class LoaderMod extends _modapi__WEBPACK_IMPORTED_MODULE_0__.Vb{constructor(){super(...arguments),this.name="JavaScript Loader",this.description="The default loader for modbox.",this.version="0.0.1",this.namespace="loader-js"}Load(data){return eval(`(function(){return ${data}})();`)}CanLoad(e){return e.endsWith(".js")}}},791:(e,t,o)=>{o.d(t,{Vb:()=>l,Cy:()=>c,M5:()=>d});class r{constructor(){this._callbacks={}}on(e,t){this._callbacks[e]||(this._callbacks[e]=[]),this._callbacks[e].push(t)}off(e,t){this._callbacks[e]&&this._callbacks[e].forEach(((o,r)=>{o===t&&this._callbacks[e].splice(r,1)}))}once(e,t){this.on(e,((...o)=>{t(o),this.off(e,arguments.callee)}))}emit(e,...t){this._callbacks[e]&&this._callbacks[e].forEach((e=>e(...t)))}}class i{constructor(e,t,o){this.name=e,this.data=t,this.defaultaction=o,this.defaultPrevented=!1}preventDefault(){this.defaultPrevented=!0}run_default(...e){this.defaultPrevented||this.defaultaction(...e)}}var n,s;!function(e){e.deepClone=function e(t){let o=[];for(let r=0;r<t.length;r++){let i=t[r];"object"==typeof i&&(i=s.deepClone(i)),Array.isArray(i)&&(i=e(i)),o.push(i)}return o},e.remove=function(e,t){return t.splice(e,1)}}(n||(n={})),function(e){function t(e){for(let o in e){if("function"==typeof e[o])return!0;if("object"==typeof e[o])return t(e[o])}return!1}e.hasFunctions=t,e.deepClone=function e(o){if(window.structuredClone)return window.structuredClone(o);if(!t(o))return JSON.parse(JSON.stringify(o));let r={};for(let t in o)"object"!=typeof o[t]?Array.isArray(o[t])?r[t]=n.deepClone(o[t]):r[t]=o[t]:r[t]=e(o[t])}}(s||(s={}));let a=window;class l{constructor(){this.name="no name",this.description="no description",this.version="0.0.0",this.namespace="mod"}init(){}}class d extends l{constructor(){super(...arguments),this.name="ModAPI",this.description="A API for rmtrollbox mods",this.version="0.0.1",this.namespace="modapi",this.loaded=[],this.hooks={}}GetMod(e){let t=this.loaded.find((t=>t.namespace===e));if(!t)throw new Error(`Mod with namespace ${e} not found.`);return t}GetModByName(e){return this.loaded.find((t=>t.name===e))}GetMods(){return this.loaded}LoadMod(e){let t=new e;this.loaded.find((e=>e.name===t.name))||(this.loaded.push(t),t.init())}ReplaceMod(e,t){let o=this.loaded.findIndex((t=>t.name===e.name));-1!==o&&(this.loaded[o]=t)}Hook(e){if(this.hooks[e])return this.hooks[e];let t=new r,o=a[e];return a[e]=async function(e,...o){let r=n.deepClone(o);t.emit("before_call",r);let s=new i("hooked_function_call",{funcargs:r},e);t.emit("call",s),await(80,new Promise((e=>setTimeout(e,80)))),s.run_default(...r),t.emit("after_call")}.bind(this,o),this.hooks[e]=t,t}FilterMods(e){return this.loaded.filter((t=>t.namespace.startsWith(e)))}}const c=new d}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var o=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](o,o.exports,__webpack_require__),o.exports}__webpack_require__.d=(e,t)=>{for(var o in t)__webpack_require__.o(t,o)&&!__webpack_require__.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__={};return(()=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Mod:()=>e.Vb,ModAPI:()=>e.Cy,ModAPI_C:()=>e.M5});var e=__webpack_require__(791);class t extends e.Vb{constructor(){super(...arguments),this.name="MBLogger",this.description="The default logger for modbox.",this.version="0.0.1",this.namespace="mblogger"}init(){}CreateLogger(e){return new o(e)}}class o{constructor(e){this.name=e}getTime(){let e=new Date;return`${e.getHours().toString().padStart(2,"0")}:${e.getMinutes().toString().padStart(2,"0")}:${e.getSeconds().toString().padStart(2,"0")}`}log(...e){console.log(`[${this.getTime()}] [${this.name}]`,...e)}info(...e){console.info(`[${this.getTime()}] [${this.name}] [INFO]`,...e)}warn(...e){console.warn(`[${this.getTime()}] [${this.name}] [WARN]`,...e)}error(...e){console.error(`[${this.getTime()}] [${this.name}] [ERROR]`,...e)}}class r extends e.Vb{constructor(){super(...arguments),this.name="rmtrollbox",this.description="rmtrollbox API",this.version="0.0.1",this.namespace="rmtrollbox",this.logger=e.Cy.GetMod("mblogger").CreateLogger("rmtrollbox"),this.registeredCommands=[]}init(){this.logger.log("Initializing rmtrollbox API"),e.Cy.Hook("sendMsg").on("call",(e=>{let t=e.data.funcargs[0];if(t.startsWith("/")){let o=t.substr(1).split(" "),r=o.shift(),i="";r.includes(":")&&(i=r.split(":")[0],r=r.split(":")[1]);let n=this.registeredCommands.filter((e=>i?e.namespace===i&&(e.name===r||e.aliases.includes(r)):e.name==r||e.aliases.includes(r)));n.length>0&&(e.preventDefault(),n[0].execute(o))}})),this.logger.info("rmtrollbox api initialized")}PrintMessage(e){window.printMsg(e)}RegisterCommand(e){this.registeredCommands.push(e)}GetElement(e){return document.querySelector(`#trollbox > ${e.GetSelector()}`)}OpenPopup(e){return new Promise((t=>{window.popup(e,t)}))}}class i{constructor(e,t){this.name=e,this.element=t,this._children=[]}GetSelector(){return this.element}SetChildren(e){return this._children=e.map((e=>(e.element=`${this.element} > ${e.element}`,e))),this}Get(e){let t=this._children.find((t=>t.name===e));if(!t)throw new Error(`No child named ${e}`);return t}get children(){return Object.fromEntries(this._children.map((e=>[e.name,e])))}}new i("Form","#trollbox_form").SetChildren([new i("Input","textarea#trollbox_input"),new i("SendButton","button"),new i("NickButton","button#trollbox_nick_btn"),new i("UploadButton","button#trollbox_upload_btn")]);class n extends e.Vb{constructor(){super(...arguments),this.name="ModStorage",this.description="A mod that stores mod data",this.version="0.0.1",this.namespace="storage"}init(){}GetStorage(e){return new s(e)}}class s{constructor(e){this.name=e}Get(e){return localStorage.getItem(`${this.name}/${e}`)}Set(e,t){localStorage.setItem(`${this.name}/${e}`,t)}Remove(e){localStorage.removeItem(`${this.name}/${e}`)}List(){let e=Object.keys(localStorage),t=[];for(let o=0;o<e.length;o++)e[o].startsWith(this.name+"/")&&t.push(e[o].replace(`${this.name}/`,""));return t}Clear(){this.List().forEach((e=>{this.Remove(e)}))}}var a=__webpack_require__(462);class l extends e.Vb{constructor(){super(...arguments),this.name="Mod Loader",this.description="A mod that loads mods",this.version="0.0.1",this.namespace="modloader",this.logger=e.Cy.GetMod("mblogger").CreateLogger("modloader")}init(){this.logger.info("Loading mods...");let t=e.Cy.GetMod("storage").GetStorage("mods");t.List(),this.logger.info(`Found ${t.List().length} mods`);for(let o=0;o<t.List().length;o++){let r=t.List()[o],i=t.Get(r);this.logger.info(`Loading ${r}`);let n=e.Cy.FilterMods("loader-"),s=!1;for(let t of n)if(t.CanLoad(r)){this.logger.info(`Loading mod ${r} with loader ${t.name}`),e.Cy.LoadMod(t.Load(i)),this.logger.info(`Loaded ${r}`),s=!0;break}s||this.logger.error(`Could not load mod ${r}: no loader found for it`)}this.logger.info(`${e.Cy.GetMods().length} Mods loaded`)}}setTimeout((()=>{window.modbox.ModAPI.LoadMod(t),window.modbox.ModAPI.LoadMod(r),window.modbox.ModAPI.LoadMod(n),window.modbox.ModAPI.LoadMod(a.Z),window.modbox.ModAPI.LoadMod(l)}),500)})(),__webpack_exports__})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,